// Code generated by go-swagger; DO NOT EDIT.

package v1

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/ory/hydra/internal/httpclient/client/v1"
)

// NewAdminListOAuth2ClientsParams creates a new AdminListOAuth2ClientsParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewAdminListOAuth2ClientsParams() *AdminListOAuth2ClientsParams {
	return &AdminListOAuth2ClientsParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewAdminListOAuth2ClientsParamsWithTimeout creates a new AdminListOAuth2ClientsParams object
// with the ability to set a timeout on a request.
func NewAdminListOAuth2ClientsParamsWithTimeout(timeout time.Duration) *AdminListOAuth2ClientsParams {
	return &AdminListOAuth2ClientsParams{
		timeout: timeout,
	}
}

// NewAdminListOAuth2ClientsParamsWithContext creates a new AdminListOAuth2ClientsParams object
// with the ability to set a context for a request.
func NewAdminListOAuth2ClientsParamsWithContext(ctx context.Context) *AdminListOAuth2ClientsParams {
	return &AdminListOAuth2ClientsParams{
		Context: ctx,
	}
}

// NewAdminListOAuth2ClientsParamsWithHTTPClient creates a new AdminListOAuth2ClientsParams object
// with the ability to set a custom HTTPClient for a request.
func NewAdminListOAuth2ClientsParamsWithHTTPClient(client *http.Client) *AdminListOAuth2ClientsParams {
	return &AdminListOAuth2ClientsParams{
		HTTPClient: client,
	}
}

/* AdminListOAuth2ClientsParams contains all the parameters to send to the API endpoint
   for the admin list o auth2 clients operation.

   Typically these are written to a http.Request.
*/
type AdminListOAuth2ClientsParams struct {

	/* ClientName.

	   The name of the clients to filter by.
	*/
	ClientName *string

	/* Owner.

	   The owner of the clients to filter by.
	*/
	Owner *string

	/* PageSize.

	     Items per page

	This is the number of items per page to return.
	For details on pagination please head over to the [pagination documentation](https://www.ory.sh/docs/ecosystem/api-design#pagination).

	     Format: int64
	     Default: 250
	*/
	PageSize *int64

	/* PageToken.

	     Next Page Token

	The next page token.
	For details on pagination please head over to the [pagination documentation](https://www.ory.sh/docs/ecosystem/api-design#pagination).

	     Default: "1"
	*/
	PageToken *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the admin list o auth2 clients params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *AdminListOAuth2ClientsParams) WithDefaults() *AdminListOAuth2ClientsParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the admin list o auth2 clients params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *AdminListOAuth2ClientsParams) SetDefaults() {
	var (
		pageSizeDefault = int64(250)

		pageTokenDefault = string("1")
	)

	val := AdminListOAuth2ClientsParams{
		PageSize:  &pageSizeDefault,
		PageToken: &pageTokenDefault,
	}

	val.timeout = o.timeout
	val.Context = o.Context
	val.HTTPClient = o.HTTPClient
	*o = val
}

// WithTimeout adds the timeout to the admin list o auth2 clients params
func (o *AdminListOAuth2ClientsParams) WithTimeout(timeout time.Duration) *AdminListOAuth2ClientsParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the admin list o auth2 clients params
func (o *AdminListOAuth2ClientsParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the admin list o auth2 clients params
func (o *AdminListOAuth2ClientsParams) WithContext(ctx context.Context) *AdminListOAuth2ClientsParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the admin list o auth2 clients params
func (o *AdminListOAuth2ClientsParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the admin list o auth2 clients params
func (o *AdminListOAuth2ClientsParams) WithHTTPClient(client *http.Client) *AdminListOAuth2ClientsParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the admin list o auth2 clients params
func (o *AdminListOAuth2ClientsParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithClientName adds the clientName to the admin list o auth2 clients params
func (o *AdminListOAuth2ClientsParams) WithClientName(clientName *string) *AdminListOAuth2ClientsParams {
	o.SetClientName(clientName)
	return o
}

// SetClientName adds the clientName to the admin list o auth2 clients params
func (o *AdminListOAuth2ClientsParams) SetClientName(clientName *string) {
	o.ClientName = clientName
}

// WithOwner adds the owner to the admin list o auth2 clients params
func (o *AdminListOAuth2ClientsParams) WithOwner(owner *string) *AdminListOAuth2ClientsParams {
	o.SetOwner(owner)
	return o
}

// SetOwner adds the owner to the admin list o auth2 clients params
func (o *AdminListOAuth2ClientsParams) SetOwner(owner *string) {
	o.Owner = owner
}

// WithPageSize adds the pageSize to the admin list o auth2 clients params
func (o *AdminListOAuth2ClientsParams) WithPageSize(pageSize *int64) *AdminListOAuth2ClientsParams {
	o.SetPageSize(pageSize)
	return o
}

// SetPageSize adds the pageSize to the admin list o auth2 clients params
func (o *AdminListOAuth2ClientsParams) SetPageSize(pageSize *int64) {
	o.PageSize = pageSize
}

// WithPageToken adds the pageToken to the admin list o auth2 clients params
func (o *AdminListOAuth2ClientsParams) WithPageToken(pageToken *string) *AdminListOAuth2ClientsParams {
	o.SetPageToken(pageToken)
	return o
}

// SetPageToken adds the pageToken to the admin list o auth2 clients params
func (o *AdminListOAuth2ClientsParams) SetPageToken(pageToken *string) {
	o.PageToken = pageToken
}

// WriteToRequest writes these params to a swagger request
func (o *AdminListOAuth2ClientsParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.ClientName != nil {

		// query param client_name
		var qrClientName string

		if o.ClientName != nil {
			qrClientName = *o.ClientName
		}
		qClientName := qrClientName
		if qClientName != "" {

			if err := r.SetQueryParam("client_name", qClientName); err != nil {
				return err
			}
		}
	}

	if o.Owner != nil {

		// query param owner
		var qrOwner string

		if o.Owner != nil {
			qrOwner = *o.Owner
		}
		qOwner := qrOwner
		if qOwner != "" {

			if err := r.SetQueryParam("owner", qOwner); err != nil {
				return err
			}
		}
	}

	if o.PageSize != nil {

		// query param page_size
		var qrPageSize int64

		if o.PageSize != nil {
			qrPageSize = *o.PageSize
		}
		qPageSize := swag.FormatInt64(qrPageSize)
		if qPageSize != "" {

			if err := r.SetQueryParam("page_size", qPageSize); err != nil {
				return err
			}
		}
	}

	if o.PageToken != nil {

		// query param page_token
		var qrPageToken string

		if o.PageToken != nil {
			qrPageToken = *o.PageToken
		}
		qPageToken := qrPageToken
		if qPageToken != "" {

			if err := r.SetQueryParam("page_token", qPageToken); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
