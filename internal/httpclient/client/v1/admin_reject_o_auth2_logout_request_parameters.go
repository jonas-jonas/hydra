// Code generated by go-swagger; DO NOT EDIT.

package v1

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"

	"github.com/ory/hydra/internal/httpclient/client/v1"
	"github.com/ory/hydra/internal/httpclient/models"
)

// NewAdminRejectOAuth2LogoutRequestParams creates a new AdminRejectOAuth2LogoutRequestParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewAdminRejectOAuth2LogoutRequestParams() *AdminRejectOAuth2LogoutRequestParams {
	return &AdminRejectOAuth2LogoutRequestParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewAdminRejectOAuth2LogoutRequestParamsWithTimeout creates a new AdminRejectOAuth2LogoutRequestParams object
// with the ability to set a timeout on a request.
func NewAdminRejectOAuth2LogoutRequestParamsWithTimeout(timeout time.Duration) *AdminRejectOAuth2LogoutRequestParams {
	return &AdminRejectOAuth2LogoutRequestParams{
		timeout: timeout,
	}
}

// NewAdminRejectOAuth2LogoutRequestParamsWithContext creates a new AdminRejectOAuth2LogoutRequestParams object
// with the ability to set a context for a request.
func NewAdminRejectOAuth2LogoutRequestParamsWithContext(ctx context.Context) *AdminRejectOAuth2LogoutRequestParams {
	return &AdminRejectOAuth2LogoutRequestParams{
		Context: ctx,
	}
}

// NewAdminRejectOAuth2LogoutRequestParamsWithHTTPClient creates a new AdminRejectOAuth2LogoutRequestParams object
// with the ability to set a custom HTTPClient for a request.
func NewAdminRejectOAuth2LogoutRequestParamsWithHTTPClient(client *http.Client) *AdminRejectOAuth2LogoutRequestParams {
	return &AdminRejectOAuth2LogoutRequestParams{
		HTTPClient: client,
	}
}

/* AdminRejectOAuth2LogoutRequestParams contains all the parameters to send to the API endpoint
   for the admin reject o auth2 logout request operation.

   Typically these are written to a http.Request.
*/
type AdminRejectOAuth2LogoutRequestParams struct {

	// Body.
	Body *models.RejectOAuth2Request

	// LogoutChallenge.
	LogoutChallenge string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the admin reject o auth2 logout request params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *AdminRejectOAuth2LogoutRequestParams) WithDefaults() *AdminRejectOAuth2LogoutRequestParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the admin reject o auth2 logout request params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *AdminRejectOAuth2LogoutRequestParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the admin reject o auth2 logout request params
func (o *AdminRejectOAuth2LogoutRequestParams) WithTimeout(timeout time.Duration) *AdminRejectOAuth2LogoutRequestParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the admin reject o auth2 logout request params
func (o *AdminRejectOAuth2LogoutRequestParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the admin reject o auth2 logout request params
func (o *AdminRejectOAuth2LogoutRequestParams) WithContext(ctx context.Context) *AdminRejectOAuth2LogoutRequestParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the admin reject o auth2 logout request params
func (o *AdminRejectOAuth2LogoutRequestParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the admin reject o auth2 logout request params
func (o *AdminRejectOAuth2LogoutRequestParams) WithHTTPClient(client *http.Client) *AdminRejectOAuth2LogoutRequestParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the admin reject o auth2 logout request params
func (o *AdminRejectOAuth2LogoutRequestParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithBody adds the body to the admin reject o auth2 logout request params
func (o *AdminRejectOAuth2LogoutRequestParams) WithBody(body *models.RejectOAuth2Request) *AdminRejectOAuth2LogoutRequestParams {
	o.SetBody(body)
	return o
}

// SetBody adds the body to the admin reject o auth2 logout request params
func (o *AdminRejectOAuth2LogoutRequestParams) SetBody(body *models.RejectOAuth2Request) {
	o.Body = body
}

// WithLogoutChallenge adds the logoutChallenge to the admin reject o auth2 logout request params
func (o *AdminRejectOAuth2LogoutRequestParams) WithLogoutChallenge(logoutChallenge string) *AdminRejectOAuth2LogoutRequestParams {
	o.SetLogoutChallenge(logoutChallenge)
	return o
}

// SetLogoutChallenge adds the logoutChallenge to the admin reject o auth2 logout request params
func (o *AdminRejectOAuth2LogoutRequestParams) SetLogoutChallenge(logoutChallenge string) {
	o.LogoutChallenge = logoutChallenge
}

// WriteToRequest writes these params to a swagger request
func (o *AdminRejectOAuth2LogoutRequestParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error
	if o.Body != nil {
		if err := r.SetBodyParam(o.Body); err != nil {
			return err
		}
	}

	// query param logout_challenge
	qrLogoutChallenge := o.LogoutChallenge
	qLogoutChallenge := qrLogoutChallenge
	if qLogoutChallenge != "" {

		if err := r.SetQueryParam("logout_challenge", qLogoutChallenge); err != nil {
			return err
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
