// Code generated by go-swagger; DO NOT EDIT.

package v1

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/ory/hydra/internal/httpclient/client/v1"
	"github.com/ory/hydra/internal/httpclient/models"
)

// PerformOAuth2TokenFlowReader is a Reader for the PerformOAuth2TokenFlow structure.
type PerformOAuth2TokenFlowReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PerformOAuth2TokenFlowReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewPerformOAuth2TokenFlowOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	default:
		result := NewPerformOAuth2TokenFlowDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewPerformOAuth2TokenFlowOK creates a PerformOAuth2TokenFlowOK with default headers values
func NewPerformOAuth2TokenFlowOK() *PerformOAuth2TokenFlowOK {
	return &PerformOAuth2TokenFlowOK{}
}

/* PerformOAuth2TokenFlowOK describes a response with status code 200, with default header values.

oAuth2TokenResponse
*/
type PerformOAuth2TokenFlowOK struct {
	Payload *models.OAuth2TokenResponse
}

func (o *PerformOAuth2TokenFlowOK) Error() string {
	return fmt.Sprintf("[POST /oauth2/token][%d] performOAuth2TokenFlowOK  %+v", 200, o.Payload)
}
func (o *PerformOAuth2TokenFlowOK) GetPayload() *models.OAuth2TokenResponse {
	return o.Payload
}

func (o *PerformOAuth2TokenFlowOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.OAuth2TokenResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPerformOAuth2TokenFlowDefault creates a PerformOAuth2TokenFlowDefault with default headers values
func NewPerformOAuth2TokenFlowDefault(code int) *PerformOAuth2TokenFlowDefault {
	return &PerformOAuth2TokenFlowDefault{
		_statusCode: code,
	}
}

/* PerformOAuth2TokenFlowDefault describes a response with status code -1, with default header values.

oAuth2ApiError
*/
type PerformOAuth2TokenFlowDefault struct {
	_statusCode int

	Payload *models.OAuth2APIError
}

// Code gets the status code for the perform o auth2 token flow default response
func (o *PerformOAuth2TokenFlowDefault) Code() int {
	return o._statusCode
}

func (o *PerformOAuth2TokenFlowDefault) Error() string {
	return fmt.Sprintf("[POST /oauth2/token][%d] performOAuth2TokenFlow default  %+v", o._statusCode, o.Payload)
}
func (o *PerformOAuth2TokenFlowDefault) GetPayload() *models.OAuth2APIError {
	return o.Payload
}

func (o *PerformOAuth2TokenFlowDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.OAuth2APIError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
