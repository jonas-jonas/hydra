// Code generated by go-swagger; DO NOT EDIT.

package v1

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/ory/hydra/internal/httpclient/client/v1"
)

// New creates a new v1 API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for v1 API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	AdminAcceptOAuth2ConsentRequest(params *AdminAcceptOAuth2ConsentRequestParams, opts ...ClientOption) (*AdminAcceptOAuth2ConsentRequestOK, error)

	AdminAcceptOAuth2LoginRequest(params *AdminAcceptOAuth2LoginRequestParams, opts ...ClientOption) (*AdminAcceptOAuth2LoginRequestOK, error)

	AdminAcceptOAuth2LogoutRequest(params *AdminAcceptOAuth2LogoutRequestParams, opts ...ClientOption) (*AdminAcceptOAuth2LogoutRequestOK, error)

	AdminCreateJSONWebKeySet(params *AdminCreateJSONWebKeySetParams, opts ...ClientOption) (*AdminCreateJSONWebKeySetCreated, error)

	AdminCreateOAuth2Client(params *AdminCreateOAuth2ClientParams, opts ...ClientOption) (*AdminCreateOAuth2ClientCreated, error)

	AdminDeleteJSONWebKey(params *AdminDeleteJSONWebKeyParams, opts ...ClientOption) (*AdminDeleteJSONWebKeyNoContent, error)

	AdminDeleteJSONWebKeySet(params *AdminDeleteJSONWebKeySetParams, opts ...ClientOption) (*AdminDeleteJSONWebKeySetNoContent, error)

	AdminDeleteOAuth2Client(params *AdminDeleteOAuth2ClientParams, opts ...ClientOption) (*AdminDeleteOAuth2ClientNoContent, error)

	AdminGetJSONWebKey(params *AdminGetJSONWebKeyParams, opts ...ClientOption) (*AdminGetJSONWebKeyOK, error)

	AdminGetJSONWebKeySet(params *AdminGetJSONWebKeySetParams, opts ...ClientOption) (*AdminGetJSONWebKeySetOK, error)

	AdminGetOAuth2Client(params *AdminGetOAuth2ClientParams, opts ...ClientOption) (*AdminGetOAuth2ClientOK, error)

	AdminGetOAuth2ConsentRequest(params *AdminGetOAuth2ConsentRequestParams, opts ...ClientOption) (*AdminGetOAuth2ConsentRequestOK, error)

	AdminGetOAuth2LoginRequest(params *AdminGetOAuth2LoginRequestParams, opts ...ClientOption) (*AdminGetOAuth2LoginRequestOK, error)

	AdminListOAuth2Clients(params *AdminListOAuth2ClientsParams, opts ...ClientOption) (*AdminListOAuth2ClientsOK, error)

	AdminListOAuth2SubjectConsentSessions(params *AdminListOAuth2SubjectConsentSessionsParams, opts ...ClientOption) (*AdminListOAuth2SubjectConsentSessionsOK, error)

	AdminPatchOAuth2Client(params *AdminPatchOAuth2ClientParams, opts ...ClientOption) (*AdminPatchOAuth2ClientOK, error)

	AdminRejectOAuth2LogoutRequest(params *AdminRejectOAuth2LogoutRequestParams, opts ...ClientOption) (*AdminRejectOAuth2LogoutRequestNoContent, error)

	AdminRevokeOAuth2ConsentSessions(params *AdminRevokeOAuth2ConsentSessionsParams, opts ...ClientOption) (*AdminRevokeOAuth2ConsentSessionsNoContent, error)

	AdminRevokeOAuth2LoginSessions(params *AdminRevokeOAuth2LoginSessionsParams, opts ...ClientOption) (*AdminRevokeOAuth2LoginSessionsNoContent, error)

	AdminUpdateJSONWebKey(params *AdminUpdateJSONWebKeyParams, opts ...ClientOption) (*AdminUpdateJSONWebKeyOK, error)

	AdminUpdateJSONWebKeySet(params *AdminUpdateJSONWebKeySetParams, opts ...ClientOption) (*AdminUpdateJSONWebKeySetOK, error)

	AdminUpdateOAuth2Client(params *AdminUpdateOAuth2ClientParams, opts ...ClientOption) (*AdminUpdateOAuth2ClientOK, error)

	DiscoverJSONWebKeys(params *DiscoverJSONWebKeysParams, opts ...ClientOption) (*DiscoverJSONWebKeysOK, error)

	DynamicClientRegistrationCreateOAuth2Client(params *DynamicClientRegistrationCreateOAuth2ClientParams, opts ...ClientOption) (*DynamicClientRegistrationCreateOAuth2ClientCreated, error)

	DynamicClientRegistrationDeleteOAuth2Client(params *DynamicClientRegistrationDeleteOAuth2ClientParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DynamicClientRegistrationDeleteOAuth2ClientNoContent, error)

	DynamicClientRegistrationGetOAuth2Client(params *DynamicClientRegistrationGetOAuth2ClientParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DynamicClientRegistrationGetOAuth2ClientOK, error)

	DynamicClientRegistrationUpdateOAuth2Client(params *DynamicClientRegistrationUpdateOAuth2ClientParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DynamicClientRegistrationUpdateOAuth2ClientOK, error)

	RejectOAuth2ConsentRequest(params *RejectOAuth2ConsentRequestParams, opts ...ClientOption) (*RejectOAuth2ConsentRequestOK, error)

	RejectOAuth2LoginRequest(params *RejectOAuth2LoginRequestParams, opts ...ClientOption) (*RejectOAuth2LoginRequestOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  AdminAcceptOAuth2ConsentRequest accepts an o auth 2 0 consent request

  When an authorization code, hybrid, or implicit OAuth 2.0 Flow is initiated, ORY Hydra asks the login provider
to authenticate the subject and then tell ORY Hydra now about it. If the subject authenticated, he/she must now be asked if
the OAuth 2.0 Client which initiated the flow should be allowed to access the resources on the subject's behalf.

The consent provider which handles this request and is a web app implemented and hosted by you. It shows a subject interface which asks the subject to
grant or deny the client access to the requested scope ("Application my-dropbox-app wants write access to all your private files").

The consent challenge is appended to the consent provider's URL to which the subject's user-agent (browser) is redirected to. The consent
provider uses that challenge to fetch information on the OAuth2 request and then tells ORY Hydra if the subject accepted
or rejected the request.

This endpoint tells ORY Hydra that the subject has authorized the OAuth 2.0 client to access resources on his/her behalf.
The consent provider includes additional information, such as session data for access and ID tokens, and if the
consent request should be used as basis for future requests.

The response contains a redirect URL which the consent provider should redirect the user-agent to.
*/
func (a *Client) AdminAcceptOAuth2ConsentRequest(params *AdminAcceptOAuth2ConsentRequestParams, opts ...ClientOption) (*AdminAcceptOAuth2ConsentRequestOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAdminAcceptOAuth2ConsentRequestParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "adminAcceptOAuth2ConsentRequest",
		Method:             "PUT",
		PathPattern:        "/admin/oauth2/auth/requests/consent/accept",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &AdminAcceptOAuth2ConsentRequestReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AdminAcceptOAuth2ConsentRequestOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*AdminAcceptOAuth2ConsentRequestDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  AdminAcceptOAuth2LoginRequest accepts an o auth 2 0 login request

  When an authorization code, hybrid, or implicit OAuth 2.0 Flow is initiated, Ory Hydra asks the login provider
(sometimes called "identity provider") to authenticate the subject and then tell Ory Hydra now about it. The login
provider is an web-app you write and host, and it must be able to authenticate ("show the subject a login screen")
a subject (in OAuth2 the proper name for subject is "resource owner").

The authentication challenge is appended to the login provider URL to which the subject's user-agent (browser) is redirected to. The login
provider uses that challenge to fetch information on the OAuth2 request and then accept or reject the requested authentication process.

This endpoint tells ORY Hydra that the subject has successfully authenticated and includes additional information such as
the subject's ID and if ORY Hydra should remember the subject's subject agent for future authentication attempts by setting
a cookie.

The response contains a redirect URL which the login provider should redirect the user-agent to.
*/
func (a *Client) AdminAcceptOAuth2LoginRequest(params *AdminAcceptOAuth2LoginRequestParams, opts ...ClientOption) (*AdminAcceptOAuth2LoginRequestOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAdminAcceptOAuth2LoginRequestParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "adminAcceptOAuth2LoginRequest",
		Method:             "PUT",
		PathPattern:        "/admin/oauth2/auth/requests/login/accept",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &AdminAcceptOAuth2LoginRequestReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AdminAcceptOAuth2LoginRequestOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*AdminAcceptOAuth2LoginRequestDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  AdminAcceptOAuth2LogoutRequest accepts an o auth 2 0 logout request

  When a user or an application requests ORY Hydra to log out a user, this endpoint is used to confirm that logout request.

The response contains a redirect URL which the consent provider should redirect the user-agent to.
*/
func (a *Client) AdminAcceptOAuth2LogoutRequest(params *AdminAcceptOAuth2LogoutRequestParams, opts ...ClientOption) (*AdminAcceptOAuth2LogoutRequestOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAdminAcceptOAuth2LogoutRequestParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "adminAcceptOAuth2LogoutRequest",
		Method:             "PUT",
		PathPattern:        "/oauth2/auth/requests/logout/accept",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &AdminAcceptOAuth2LogoutRequestReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AdminAcceptOAuth2LogoutRequestOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*AdminAcceptOAuth2LogoutRequestDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  AdminCreateJSONWebKeySet generates a new JSON web key

  This endpoint is capable of generating JSON Web Key Sets for you. There a different strategies available, such as symmetric cryptographic keys (HS256, HS512) and asymetric cryptographic keys (RS256, ECDSA). If the specified JSON Web Key Set does not exist, it will be created.

A JSON Web Key (JWK) is a JavaScript Object Notation (JSON) data structure that represents a cryptographic key. A JWK Set is a JSON data structure that represents a set of JWKs. A JSON Web Key is identified by its set and key id. ORY Hydra uses this functionality to store cryptographic keys used for TLS and JSON Web Tokens (such as OpenID Connect ID tokens), and allows storing user-defined keys as well.
*/
func (a *Client) AdminCreateJSONWebKeySet(params *AdminCreateJSONWebKeySetParams, opts ...ClientOption) (*AdminCreateJSONWebKeySetCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAdminCreateJSONWebKeySetParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "adminCreateJsonWebKeySet",
		Method:             "POST",
		PathPattern:        "/admin/keys/{set}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &AdminCreateJSONWebKeySetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AdminCreateJSONWebKeySetCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*AdminCreateJSONWebKeySetDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  AdminCreateOAuth2Client creates an o auth 2 0 client

  Create a new OAuth 2.0 client. If you pass `client_secret` the secret is used, otherwise a random secret
is generated. The secret is echoed in the response. It is not possible to retrieve it later on.

OAuth 2.0 clients are used to perform OAuth 2.0 and OpenID Connect flows. Usually, OAuth 2.0 clients are
generated for applications which want to consume your OAuth 2.0 or OpenID Connect capabilities.
*/
func (a *Client) AdminCreateOAuth2Client(params *AdminCreateOAuth2ClientParams, opts ...ClientOption) (*AdminCreateOAuth2ClientCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAdminCreateOAuth2ClientParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "adminCreateOAuth2Client",
		Method:             "POST",
		PathPattern:        "/admin/clients",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &AdminCreateOAuth2ClientReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AdminCreateOAuth2ClientCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*AdminCreateOAuth2ClientDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  AdminDeleteJSONWebKey deletes a JSON web key

  Use this endpoint to delete a single JSON Web Key.

A JSON Web Key (JWK) is a JavaScript Object Notation (JSON) data structure that represents a cryptographic key. A JWK Set is a JSON data structure that represents a set of JWKs. A JSON Web Key is identified by its set and key id. ORY Hydra uses this functionality to store cryptographic keys used for TLS and JSON Web Tokens (such as OpenID Connect ID tokens), and allows storing user-defined keys as well.
*/
func (a *Client) AdminDeleteJSONWebKey(params *AdminDeleteJSONWebKeyParams, opts ...ClientOption) (*AdminDeleteJSONWebKeyNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAdminDeleteJSONWebKeyParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "adminDeleteJsonWebKey",
		Method:             "DELETE",
		PathPattern:        "/admin/keys/{set}/{kid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &AdminDeleteJSONWebKeyReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AdminDeleteJSONWebKeyNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*AdminDeleteJSONWebKeyDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  AdminDeleteJSONWebKeySet deletes a JSON web key set

  Use this endpoint to delete a complete JSON Web Key Set and all the keys in that set.

A JSON Web Key (JWK) is a JavaScript Object Notation (JSON) data structure that represents a cryptographic key. A JWK Set is a JSON data structure that represents a set of JWKs. A JSON Web Key is identified by its set and key id. ORY Hydra uses this functionality to store cryptographic keys used for TLS and JSON Web Tokens (such as OpenID Connect ID tokens), and allows storing user-defined keys as well.
*/
func (a *Client) AdminDeleteJSONWebKeySet(params *AdminDeleteJSONWebKeySetParams, opts ...ClientOption) (*AdminDeleteJSONWebKeySetNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAdminDeleteJSONWebKeySetParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "adminDeleteJsonWebKeySet",
		Method:             "DELETE",
		PathPattern:        "/admin/keys/{set}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &AdminDeleteJSONWebKeySetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AdminDeleteJSONWebKeySetNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*AdminDeleteJSONWebKeySetDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  AdminDeleteOAuth2Client deletes an o auth 2 0 client

  Delete an existing OAuth 2.0 Client by its ID.

OAuth 2.0 clients are used to perform OAuth 2.0 and OpenID Connect flows. Usually, OAuth 2.0 clients are
generated for applications which want to consume your OAuth 2.0 or OpenID Connect capabilities.

Make sure that this endpoint is well protected and only callable by first-party components.
*/
func (a *Client) AdminDeleteOAuth2Client(params *AdminDeleteOAuth2ClientParams, opts ...ClientOption) (*AdminDeleteOAuth2ClientNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAdminDeleteOAuth2ClientParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "adminDeleteOAuth2Client",
		Method:             "DELETE",
		PathPattern:        "/clients/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &AdminDeleteOAuth2ClientReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AdminDeleteOAuth2ClientNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*AdminDeleteOAuth2ClientDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  AdminGetJSONWebKey fetches a JSON web key

  This endpoint returns a singular JSON Web Key. It is identified by the set and the specific key ID (kid).
*/
func (a *Client) AdminGetJSONWebKey(params *AdminGetJSONWebKeyParams, opts ...ClientOption) (*AdminGetJSONWebKeyOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAdminGetJSONWebKeyParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "adminGetJsonWebKey",
		Method:             "GET",
		PathPattern:        "/admin/keys/{set}/{kid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &AdminGetJSONWebKeyReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AdminGetJSONWebKeyOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*AdminGetJSONWebKeyDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  AdminGetJSONWebKeySet retrieves a JSON web key set

  This endpoint can be used to retrieve JWK Sets stored in ORY Hydra.

A JSON Web Key (JWK) is a JavaScript Object Notation (JSON) data structure that represents a cryptographic key. A JWK Set is a JSON data structure that represents a set of JWKs. A JSON Web Key is identified by its set and key id. ORY Hydra uses this functionality to store cryptographic keys used for TLS and JSON Web Tokens (such as OpenID Connect ID tokens), and allows storing user-defined keys as well.
*/
func (a *Client) AdminGetJSONWebKeySet(params *AdminGetJSONWebKeySetParams, opts ...ClientOption) (*AdminGetJSONWebKeySetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAdminGetJSONWebKeySetParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "adminGetJsonWebKeySet",
		Method:             "GET",
		PathPattern:        "/admin/keys/{set}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &AdminGetJSONWebKeySetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AdminGetJSONWebKeySetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*AdminGetJSONWebKeySetDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  AdminGetOAuth2Client gets an o auth 2 0 client

  Get an OAuth 2.0 client by its ID. This endpoint never returns the client secret.

OAuth 2.0 clients are used to perform OAuth 2.0 and OpenID Connect flows. Usually, OAuth 2.0 clients are
generated for applications which want to consume your OAuth 2.0 or OpenID Connect capabilities.
*/
func (a *Client) AdminGetOAuth2Client(params *AdminGetOAuth2ClientParams, opts ...ClientOption) (*AdminGetOAuth2ClientOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAdminGetOAuth2ClientParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "adminGetOAuth2Client",
		Method:             "GET",
		PathPattern:        "/clients/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &AdminGetOAuth2ClientReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AdminGetOAuth2ClientOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*AdminGetOAuth2ClientDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  AdminGetOAuth2ConsentRequest gets o auth 2 0 consent request information

  When an authorization code, hybrid, or implicit OAuth 2.0 Flow is initiated, ORY Hydra asks the login provider
to authenticate the subject and then tell ORY Hydra now about it. If the subject authenticated, he/she must now be asked if
the OAuth 2.0 Client which initiated the flow should be allowed to access the resources on the subject's behalf.

The consent provider which handles this request and is a web app implemented and hosted by you. It shows a subject interface which asks the subject to
grant or deny the client access to the requested scope ("Application my-dropbox-app wants write access to all your private files").

The consent challenge is appended to the consent provider's URL to which the subject's user-agent (browser) is redirected to. The consent
provider uses that challenge to fetch information on the OAuth2 request and then tells ORY Hydra if the subject accepted
or rejected the request.
*/
func (a *Client) AdminGetOAuth2ConsentRequest(params *AdminGetOAuth2ConsentRequestParams, opts ...ClientOption) (*AdminGetOAuth2ConsentRequestOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAdminGetOAuth2ConsentRequestParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "adminGetOAuth2ConsentRequest",
		Method:             "GET",
		PathPattern:        "/oauth2/auth/requests/consent",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &AdminGetOAuth2ConsentRequestReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AdminGetOAuth2ConsentRequestOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*AdminGetOAuth2ConsentRequestDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  AdminGetOAuth2LoginRequest gets an o auth 2 0 login request

  When an authorization code, hybrid, or implicit OAuth 2.0 Flow is initiated, ORY Hydra asks the login provider
(sometimes called "identity provider") to authenticate the subject and then tell ORY Hydra now about it. The login
provider is an web-app you write and host, and it must be able to authenticate ("show the subject a login screen")
a subject (in OAuth2 the proper name for subject is "resource owner").

The authentication challenge is appended to the login provider URL to which the subject's user-agent (browser) is redirected to. The login
provider uses that challenge to fetch information on the OAuth2 request and then accept or reject the requested authentication process.
*/
func (a *Client) AdminGetOAuth2LoginRequest(params *AdminGetOAuth2LoginRequestParams, opts ...ClientOption) (*AdminGetOAuth2LoginRequestOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAdminGetOAuth2LoginRequestParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "adminGetOAuth2LoginRequest",
		Method:             "GET",
		PathPattern:        "/admin/oauth2/auth/requests/login",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &AdminGetOAuth2LoginRequestReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AdminGetOAuth2LoginRequestOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*AdminGetOAuth2LoginRequestDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  AdminListOAuth2Clients lists o auth 2 0 clients

  This endpoint lists all clients in the database, and never returns client secrets.
As a default it lists the first 100 clients. The `limit` parameter can be used to retrieve more clients,
but it has an upper bound at 500 objects. Pagination should be used to retrieve more than 500 objects.

OAuth 2.0 clients are used to perform OAuth 2.0 and OpenID Connect flows. Usually, OAuth 2.0 clients are
generated for applications which want to consume your OAuth 2.0 or OpenID Connect capabilities.

The "Link" header is also included in successful responses, which contains one or more links for pagination,
formatted like so: '<https://project-slug.projects.oryapis.com/admin/clients?limit={limit}&offset={offset}>; rel="{page}"',
where page is one of the following applicable pages: 'first', 'next', 'last', and 'previous'. Multiple links can
be included in this header, and will be separated by a comma.
*/
func (a *Client) AdminListOAuth2Clients(params *AdminListOAuth2ClientsParams, opts ...ClientOption) (*AdminListOAuth2ClientsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAdminListOAuth2ClientsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "adminListOAuth2Clients",
		Method:             "GET",
		PathPattern:        "/clients",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &AdminListOAuth2ClientsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AdminListOAuth2ClientsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*AdminListOAuth2ClientsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  AdminListOAuth2SubjectConsentSessions lists o auth 2 0 consent sessions of a subject

  This endpoint lists all subject's granted consent sessions, including client and granted scope.
If the subject is unknown or has not granted any consent sessions yet, the endpoint returns an
empty JSON array with status code 200 OK.

The "Link" header is also included in successful responses, which contains one or more links for pagination, formatted like so: '<https://hydra-url/admin/oauth2/auth/sessions/consent?subject={user}&limit={limit}&offset={offset}>; rel="{page}"', where page is one of the following applicable pages: 'first', 'next', 'last', and 'previous'.
Multiple links can be included in this header, and will be separated by a comma.
*/
func (a *Client) AdminListOAuth2SubjectConsentSessions(params *AdminListOAuth2SubjectConsentSessionsParams, opts ...ClientOption) (*AdminListOAuth2SubjectConsentSessionsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAdminListOAuth2SubjectConsentSessionsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "adminListOAuth2SubjectConsentSessions",
		Method:             "GET",
		PathPattern:        "/admin/oauth2/auth/sessions/consent",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &AdminListOAuth2SubjectConsentSessionsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AdminListOAuth2SubjectConsentSessionsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*AdminListOAuth2SubjectConsentSessionsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  AdminPatchOAuth2Client patches an o auth 2 0 client

  Patch an existing OAuth 2.0 Client. If you pass `client_secret`
the secret will be updated and returned via the API. This is the
only time you will be able to retrieve the client secret, so write it down and keep it safe.

OAuth 2.0 clients are used to perform OAuth 2.0 and OpenID Connect flows. Usually, OAuth 2.0 clients are
generated for applications which want to consume your OAuth 2.0 or OpenID Connect capabilities.
*/
func (a *Client) AdminPatchOAuth2Client(params *AdminPatchOAuth2ClientParams, opts ...ClientOption) (*AdminPatchOAuth2ClientOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAdminPatchOAuth2ClientParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "adminPatchOAuth2Client",
		Method:             "PATCH",
		PathPattern:        "/clients/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &AdminPatchOAuth2ClientReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AdminPatchOAuth2ClientOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*AdminPatchOAuth2ClientDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  AdminRejectOAuth2LogoutRequest rejects an o auth 2 0 logout request

  When a user or an application requests ORY Hydra to log out a user, this endpoint is used to deny that logout request.
No body is required.

The response is empty as the logout provider has to chose what action to perform next.
*/
func (a *Client) AdminRejectOAuth2LogoutRequest(params *AdminRejectOAuth2LogoutRequestParams, opts ...ClientOption) (*AdminRejectOAuth2LogoutRequestNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAdminRejectOAuth2LogoutRequestParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "adminRejectOAuth2LogoutRequest",
		Method:             "PUT",
		PathPattern:        "/oauth2/auth/requests/logout/reject",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &AdminRejectOAuth2LogoutRequestReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AdminRejectOAuth2LogoutRequestNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*AdminRejectOAuth2LogoutRequestDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  AdminRevokeOAuth2ConsentSessions revokes o auth 2 0 consent sessions of a subject for a specific o auth 2 0 client

  This endpoint revokes a subject's granted consent sessions for a specific OAuth 2.0 Client and invalidates all
associated OAuth 2.0 Access Tokens.
*/
func (a *Client) AdminRevokeOAuth2ConsentSessions(params *AdminRevokeOAuth2ConsentSessionsParams, opts ...ClientOption) (*AdminRevokeOAuth2ConsentSessionsNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAdminRevokeOAuth2ConsentSessionsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "adminRevokeOAuth2ConsentSessions",
		Method:             "DELETE",
		PathPattern:        "/admin/oauth2/auth/sessions/consent",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &AdminRevokeOAuth2ConsentSessionsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AdminRevokeOAuth2ConsentSessionsNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*AdminRevokeOAuth2ConsentSessionsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  AdminRevokeOAuth2LoginSessions invalidates all o auth 2 0 login sessions of a certain user

  This endpoint invalidates a subject's authentication session. After revoking the authentication session, the subject
has to re-authenticate at ORY Hydra. This endpoint does not invalidate any tokens and does not work with OpenID Connect
Front- or Back-channel logout.
*/
func (a *Client) AdminRevokeOAuth2LoginSessions(params *AdminRevokeOAuth2LoginSessionsParams, opts ...ClientOption) (*AdminRevokeOAuth2LoginSessionsNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAdminRevokeOAuth2LoginSessionsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "adminRevokeOAuth2LoginSessions",
		Method:             "DELETE",
		PathPattern:        "/admin/oauth2/auth/sessions/login",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &AdminRevokeOAuth2LoginSessionsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AdminRevokeOAuth2LoginSessionsNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*AdminRevokeOAuth2LoginSessionsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  AdminUpdateJSONWebKey updates a JSON web key

  Use this method if you do not want to let Hydra generate the JWKs for you, but instead save your own.

A JSON Web Key (JWK) is a JavaScript Object Notation (JSON) data structure that represents a cryptographic key. A JWK Set is a JSON data structure that represents a set of JWKs. A JSON Web Key is identified by its set and key id. ORY Hydra uses this functionality to store cryptographic keys used for TLS and JSON Web Tokens (such as OpenID Connect ID tokens), and allows storing user-defined keys as well.
*/
func (a *Client) AdminUpdateJSONWebKey(params *AdminUpdateJSONWebKeyParams, opts ...ClientOption) (*AdminUpdateJSONWebKeyOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAdminUpdateJSONWebKeyParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "adminUpdateJsonWebKey",
		Method:             "PUT",
		PathPattern:        "/admin/keys/{set}/{kid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &AdminUpdateJSONWebKeyReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AdminUpdateJSONWebKeyOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*AdminUpdateJSONWebKeyDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  AdminUpdateJSONWebKeySet updates a JSON web key set

  Use this method if you do not want to let Hydra generate the JWKs for you, but instead save your own.

A JSON Web Key (JWK) is a JavaScript Object Notation (JSON) data structure that represents a cryptographic key. A JWK Set is a JSON data structure that represents a set of JWKs. A JSON Web Key is identified by its set and key id. ORY Hydra uses this functionality to store cryptographic keys used for TLS and JSON Web Tokens (such as OpenID Connect ID tokens), and allows storing user-defined keys as well.
*/
func (a *Client) AdminUpdateJSONWebKeySet(params *AdminUpdateJSONWebKeySetParams, opts ...ClientOption) (*AdminUpdateJSONWebKeySetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAdminUpdateJSONWebKeySetParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "adminUpdateJsonWebKeySet",
		Method:             "PUT",
		PathPattern:        "/admin/keys/{set}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &AdminUpdateJSONWebKeySetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AdminUpdateJSONWebKeySetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*AdminUpdateJSONWebKeySetDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  AdminUpdateOAuth2Client updates an o auth 2 0 client

  Update an existing OAuth 2.0 Client. If you pass `client_secret` the secret is used, otherwise a random secret
is generated. The secret is echoed in the response. It is not possible to retrieve it later on.

OAuth 2.0 clients are used to perform OAuth 2.0 and OpenID Connect flows. Usually, OAuth 2.0 clients are
generated for applications which want to consume your OAuth 2.0 or OpenID Connect capabilities.
*/
func (a *Client) AdminUpdateOAuth2Client(params *AdminUpdateOAuth2ClientParams, opts ...ClientOption) (*AdminUpdateOAuth2ClientOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAdminUpdateOAuth2ClientParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "adminUpdateOAuth2Client",
		Method:             "PUT",
		PathPattern:        "/admin/clients/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &AdminUpdateOAuth2ClientReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AdminUpdateOAuth2ClientOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*AdminUpdateOAuth2ClientDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  DiscoverJSONWebKeys discovers JSON web keys

  This endpoint returns JSON Web Keys required to verifying OpenID Connect ID Tokens and,
if enabled, OAuth 2.0 JWT Access Tokens. This endpoint can be used with client libraries like
[node-jwks-rsa](https://github.com/auth0/node-jwks-rsa) among others.
*/
func (a *Client) DiscoverJSONWebKeys(params *DiscoverJSONWebKeysParams, opts ...ClientOption) (*DiscoverJSONWebKeysOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDiscoverJSONWebKeysParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "discoverJsonWebKeys",
		Method:             "GET",
		PathPattern:        "/.well-known/jwks.json",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &DiscoverJSONWebKeysReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DiscoverJSONWebKeysOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*DiscoverJSONWebKeysDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  DynamicClientRegistrationCreateOAuth2Client registers an o auth 2 0 client using the open ID o auth2 dynamic client registration management protocol

  This endpoint behaves like the administrative counterpart (`createOAuth2Client`) but is capable of facing the
public internet directly and can be used in self-service. It implements the OpenID Connect
Dynamic Client Registration Protocol. This feature needs to be enabled in the configuration. This endpoint
is disabled by default. It can be enabled by an administrator.

Please note that using this endpoint you are not able to choose the `client_secret` nor the `client_id` as those
values will be server generated when specifying `token_endpoint_auth_method` as `client_secret_basic` or
`client_secret_post`.

The `client_secret` will be returned in the response and you will not be able to retrieve it later on.
Write the secret down and keep it somewhere safe.
*/
func (a *Client) DynamicClientRegistrationCreateOAuth2Client(params *DynamicClientRegistrationCreateOAuth2ClientParams, opts ...ClientOption) (*DynamicClientRegistrationCreateOAuth2ClientCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDynamicClientRegistrationCreateOAuth2ClientParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "dynamicClientRegistrationCreateOAuth2Client",
		Method:             "POST",
		PathPattern:        "/oauth2/register",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &DynamicClientRegistrationCreateOAuth2ClientReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DynamicClientRegistrationCreateOAuth2ClientCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*DynamicClientRegistrationCreateOAuth2ClientDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  DynamicClientRegistrationDeleteOAuth2Client deletes an o auth 2 0 client using the open ID o auth2 dynamic client registration management protocol

  This endpoint behaves like the administrative counterpart (`deleteOAuth2Client`) but is capable of facing the
public internet directly and can be used in self-service. It implements the OpenID Connect
Dynamic Client Registration Protocol. This feature needs to be enabled in the configuration. This endpoint
is disabled by default. It can be enabled by an administrator.

To use this endpoint, you will need to present the client's authentication credentials. If the OAuth2 Client
uses the Token Endpoint Authentication Method `client_secret_post`, you need to present the client secret in the URL query.
If it uses `client_secret_basic`, present the Client ID and the Client Secret in the Authorization header.

OAuth 2.0 clients are used to perform OAuth 2.0 and OpenID Connect flows. Usually, OAuth 2.0 clients are
generated for applications which want to consume your OAuth 2.0 or OpenID Connect capabilities.
*/
func (a *Client) DynamicClientRegistrationDeleteOAuth2Client(params *DynamicClientRegistrationDeleteOAuth2ClientParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DynamicClientRegistrationDeleteOAuth2ClientNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDynamicClientRegistrationDeleteOAuth2ClientParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "dynamicClientRegistrationDeleteOAuth2Client",
		Method:             "DELETE",
		PathPattern:        "/oauth2/register/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &DynamicClientRegistrationDeleteOAuth2ClientReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DynamicClientRegistrationDeleteOAuth2ClientNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*DynamicClientRegistrationDeleteOAuth2ClientDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  DynamicClientRegistrationGetOAuth2Client gets an o auth 2 0 client using the open ID o auth2 dynamic client registration management protocol

  This endpoint behaves like the administrative counterpart (`getOAuth2Client`) but is capable of facing the
public internet directly and can be used in self-service. It implements the OpenID Connect
Dynamic Client Registration Protocol. This feature needs to be enabled in the configuration. This endpoint
is disabled by default. It can be enabled by an administrator.

To use this endpoint, you will need to present the client's authentication credentials. If the OAuth2 Client
uses the Token Endpoint Authentication Method `client_secret_post`, you need to present the client secret in the URL query.
If it uses `client_secret_basic`, present the Client ID and the Client Secret in the Authorization header.

OAuth 2.0 clients are used to perform OAuth 2.0 and OpenID Connect flows. Usually, OAuth 2.0 clients are
generated for applications which want to consume your OAuth 2.0 or OpenID Connect capabilities.
*/
func (a *Client) DynamicClientRegistrationGetOAuth2Client(params *DynamicClientRegistrationGetOAuth2ClientParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DynamicClientRegistrationGetOAuth2ClientOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDynamicClientRegistrationGetOAuth2ClientParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "dynamicClientRegistrationGetOAuth2Client",
		Method:             "GET",
		PathPattern:        "/oauth2/register/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &DynamicClientRegistrationGetOAuth2ClientReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DynamicClientRegistrationGetOAuth2ClientOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*DynamicClientRegistrationGetOAuth2ClientDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  DynamicClientRegistrationUpdateOAuth2Client updates an o auth 2 0 client using the open ID o auth2 dynamic client registration management protocol

  This endpoint behaves like the administrative counterpart (`updateOAuth2Client`) but is capable of facing the
public internet directly and can be used in self-service. It implements the OpenID Connect
Dynamic Client Registration Protocol. This feature needs to be enabled in the configuration. This endpoint
is disabled by default. It can be enabled by an administrator.

If you pass `client_secret` the secret is used, otherwise a random secret
is generated. The secret is echoed in the response. It is not possible to retrieve it later on.

To use this endpoint, you will need to present the client's authentication credentials. If the OAuth2 Client
uses the Token Endpoint Authentication Method `client_secret_post`, you need to present the client secret in the URL query.
If it uses `client_secret_basic`, present the Client ID and the Client Secret in the Authorization header.

OAuth 2.0 clients are used to perform OAuth 2.0 and OpenID Connect flows. Usually, OAuth 2.0 clients are
generated for applications which want to consume your OAuth 2.0 or OpenID Connect capabilities.
*/
func (a *Client) DynamicClientRegistrationUpdateOAuth2Client(params *DynamicClientRegistrationUpdateOAuth2ClientParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DynamicClientRegistrationUpdateOAuth2ClientOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDynamicClientRegistrationUpdateOAuth2ClientParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "dynamicClientRegistrationUpdateOAuth2Client",
		Method:             "PUT",
		PathPattern:        "/oauth2/register/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &DynamicClientRegistrationUpdateOAuth2ClientReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DynamicClientRegistrationUpdateOAuth2ClientOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*DynamicClientRegistrationUpdateOAuth2ClientDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  RejectOAuth2ConsentRequest rejects an o auth 2 0 consent request

  When an authorization code, hybrid, or implicit OAuth 2.0 Flow is initiated, ORY Hydra asks the login provider
to authenticate the subject and then tell ORY Hydra now about it. If the subject authenticated, he/she must now be asked if
the OAuth 2.0 Client which initiated the flow should be allowed to access the resources on the subject's behalf.

The consent provider which handles this request and is a web app implemented and hosted by you. It shows a subject interface which asks the subject to
grant or deny the client access to the requested scope ("Application my-dropbox-app wants write access to all your private files").

The consent challenge is appended to the consent provider's URL to which the subject's user-agent (browser) is redirected to. The consent
provider uses that challenge to fetch information on the OAuth2 request and then tells ORY Hydra if the subject accepted
or rejected the request.

This endpoint tells ORY Hydra that the subject has not authorized the OAuth 2.0 client to access resources on his/her behalf.
The consent provider must include a reason why the consent was not granted.

The response contains a redirect URL which the consent provider should redirect the user-agent to.
*/
func (a *Client) RejectOAuth2ConsentRequest(params *RejectOAuth2ConsentRequestParams, opts ...ClientOption) (*RejectOAuth2ConsentRequestOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRejectOAuth2ConsentRequestParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "rejectOAuth2ConsentRequest",
		Method:             "PUT",
		PathPattern:        "/admin/oauth2/auth/requests/consent/reject",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &RejectOAuth2ConsentRequestReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*RejectOAuth2ConsentRequestOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*RejectOAuth2ConsentRequestDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  RejectOAuth2LoginRequest rejects an o auth 2 0 login request

  When an authorization code, hybrid, or implicit OAuth 2.0 Flow is initiated, ORY Hydra asks the login provider
(sometimes called "identity provider") to authenticate the subject and then tell ORY Hydra now about it. The login
provider is an web-app you write and host, and it must be able to authenticate ("show the subject a login screen")
a subject (in OAuth2 the proper name for subject is "resource owner").

The authentication challenge is appended to the login provider URL to which the subject's user-agent (browser) is redirected to. The login
provider uses that challenge to fetch information on the OAuth2 request and then accept or reject the requested authentication process.

This endpoint tells ORY Hydra that the subject has not authenticated and includes a reason why the authentication
was denied.

The response contains a redirect URL which the login provider should redirect the user-agent to.
*/
func (a *Client) RejectOAuth2LoginRequest(params *RejectOAuth2LoginRequestParams, opts ...ClientOption) (*RejectOAuth2LoginRequestOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRejectOAuth2LoginRequestParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "rejectOAuth2LoginRequest",
		Method:             "PUT",
		PathPattern:        "/admin/oauth2/auth/requests/login/reject",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &RejectOAuth2LoginRequestReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*RejectOAuth2LoginRequestOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*RejectOAuth2LoginRequestDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
